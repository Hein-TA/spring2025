package com.jdc.spring.jdbc;

import java.sql.Statement;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

@TestMethodOrder(value = OrderAnnotation.class)
public class GettingStart {

	private static final String URL = "jdbc:h2:mem:testDB";
	private static final String USERNAME = "username";
	private static final String PASSWORD = "password";
	static Connection connection;

	@BeforeAll
	public static void beforeAll() throws SQLException {

		connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);

		String accountDDL = """
				create table ACCOUNT (
					id int GENERATED BY DEFAULT AS IDENTITY,
					name varchar(40) not null,
					phone varchar(12) not null
				)
				""";

		try (var stmt = connection.createStatement()) {
			stmt.execute(accountDDL);
		}

	}

	@Order(1)
	@ParameterizedTest
	@CsvSource({ 
		"Aung Aung, 091111122221, 1", 
		"MG MG, 091111122222, 2", 
		"KG KG, 091111122223, 3"
		})
	void test_insert(String name, String phone, int expectedId) {

		String sql = "insert into ACCOUNT (name, phone) values (?, ?)";

		try (var stmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

			stmt.setString(1, name);
			stmt.setString(2, phone);
			stmt.executeUpdate();

			var rs = stmt.getGeneratedKeys();

			while (rs.next()) {
				var result = rs.getInt(1);

				assertEquals(expectedId, result);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	@Order(2)
	@Test
	void test_select_count() {
		String sql = "select count(*) from ACCOUNT";

		try (var stmt = connection.prepareStatement(sql)) {

			var result = stmt.executeQuery();

			while (result.next()) {
				var count = result.getLong(1);
				assertEquals(3L, count);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Order(3)
	@ParameterizedTest
	@CsvSource({ 
		"Aung Aung, 091111122221, 1", 
		"MG MG, 091111122222, 2", 
		"KG KG, 091111122223, 3" 
		})
	void test_find_by_id(String name, String phone, int id) {
		String sql = "select * from ACCOUNT where id = ?";

		try (var stmt = connection.prepareStatement(sql)) {

			stmt.setInt(1, id);
			var rs = stmt.executeQuery();

			while (rs.next()) {
				var nameColumn = rs.getString("name");
				var phoneColumn = rs.getString("phone");

				assertEquals(name, nameColumn);
				assertEquals(phone, phoneColumn);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@AfterAll
	public static void afterAll() throws SQLException {
		if (connection != null) {
			connection.close();
		}
	}

}
